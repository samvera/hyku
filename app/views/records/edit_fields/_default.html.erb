<%# OVERRIDE: HydraEditor 5.0.5 support dynamic labels and hints for custom worktypes %>
<%# Avoid NoMethod error when rendering partial in Collection or batch edit form %>
<%# Hide unwanted fields from the form %>
<% return if f.object.try(:hidden?, key) %>

<% record = f.object.model %>
<% controlled_vocab_config = controlled_vocabulary_options_for(key, record.class) %>

<% if controlled_vocab_config.present? %>
  <% if controlled_vocab_config[:type] == 'select' %>
    <%# Render local controlled vocabulary as select field %>
    <% if f.object.multiple? key %>
      <%= f.input key,
          as: :select,
          collection: controlled_vocab_config[:options],
          label: label_for(term: key, record_class: record.class),
          hint: hint_for(term: key, record_class: record.class),
          input_html: { class: 'form-control', name: "#{f.object_name}[#{key}][]" },
          include_blank: true,
          selected: f.object.send(key).first,
          required: f.object.required?(key) %>
    <% else %>
      <%= f.input key,
          as: :select,
          collection: controlled_vocab_config[:options],
          label: label_for(term: key, record_class: record.class),
          hint: hint_for(term: key, record_class: record.class),
          include_blank: true,
          input_html: { class: 'form-control' },
          required: f.object.required?(key) %>
    <% end %>
  <% elsif controlled_vocab_config[:type] == 'autocomplete' %>
    <%# Render remote authority as restrictive controlled vocabulary field %>
    <% if f.object.multiple? key %>
      <%= f.input key,
          as: :multi_value,
          label: label_for(term: key, record_class: record.class),
          hint: hint_for(term: key, record_class: record.class),
          input_html: {
            class: 'form-control',
            'data-autocomplete' => key.to_s,
            'data-autocomplete-url' => controlled_vocab_config[:url],
            'data-autocomplete-type' => 'linked'
          },
          wrapper_html: {
            data: {
              'autocomplete-url' => controlled_vocab_config[:url],
              'field-name' => key.to_s
            }
          },
          required: f.object.required?(key) %>
    <% else %>
      <%= f.input key,
          as: :controlled_vocabulary,
          label: label_for(term: key, record_class: record.class),
          hint: hint_for(term: key, record_class: record.class),
          input_html: {
            class: 'form-control',
            'data-autocomplete' => key.to_s,
            'data-autocomplete-url' => controlled_vocab_config[:url],
            'data-autocomplete-type' => 'linked'
          },
          wrapper_html: {
            data: {
              'autocomplete-url' => controlled_vocab_config[:url],
              'field-name' => key.to_s
            }
          },
          required: f.object.required?(key) %>
    <% end %>
  <% end %>
<% elsif f.object.multiple? key %>
  <%# Render standard multi-value field %>
  <%= f.input key,
      as: :multi_value,
      label: label_for(term: key, record_class: record.class),
      hint: hint_for(term: key, record_class: record.class),
      input_html: { class: 'form-control' },
      required: f.object.required?(key) %>
<% else %>
  <%# Render standard single-value field %>
  <%= f.input key,
      label: label_for(term: key, record_class: record.class),
      hint: hint_for(term: key, record_class: record.class),
      required: f.object.required?(key) %>
<% end %>
